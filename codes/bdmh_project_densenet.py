# -*- coding: utf-8 -*-
"""BDMH Project_Densenet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/117ukMsBnRxjD_SYlCpOEC-fZ4K12JXX5
"""

## Cell 0 ##
##Import all libraries

from fastai import *
from fastai.vision import *

## Cell 1 ##
## Define path of images ##


path = "drive/My Drive/kai/"
print(path)

import glob
import os
Labels=[]
for filename in glob.glob("drive/My Drive/kai/*"):
  if not os.path.isdir(filename):
    Labels.append(int(filename[19]))
    
print(Labels)

fn_paths = []
for filename in glob.glob("drive/My Drive/kai/*"):
  if not os.path.isdir(filename):
    fn_paths.append(filename)

print(fn_paths)



##Cell 2 ##
## Prepare Data using image data bunch and # Creation of transformation object

transformations = get_transforms(do_flip = True,
                                 flip_vert=True, 
                                 max_lighting=0.1, 
                                 max_zoom=1.05,
                                 max_warp=0.,
                                 max_rotate=15,
                                 p_affine=0.75,
                                 p_lighting=0.75
                                )

data = ImageDataBunch.from_lists(path, fn_paths,labels=Labels, ds_tfms=transformations, size=256, bs=20)
data.normalize(imagenet_stats)

## Cell3 ##
## Download pre trained model ##



learn=cnn_learner(data,models.densenet121  ,metrics=accuracy)

## Cell 4 ##
## Find optimal learning Rates ##


learn.unfreeze()
learn.lr_find()
learn.recorder.plot(suggestion =True)

## Cell 5##
## Train Model with optimal Learning Rates ##

learn.fit_one_cycle(2,slice(1e-6,1e-5 ))

## Cell 6 ##
## Load model using the saved state ##

learn.load("step_d_5")

## Cell 7 ##
## Draw Confusion Matrix ##


interp = ClassificationInterpretation.from_learner(learn)
interp.plot_confusion_matrix(figsize=(5,5))

## Cell 8 ##
## Draw Summary of Evaluation Parameters ##


preds, y_true=learn.get_preds(ds_type=DatasetType.Valid)
y_true=y_true.numpy() 
preds=np.argmax(preds.numpy(), axis=-1)
from sklearn.metrics import auc, roc_curve, precision_recall_curve, classification_report

report = classification_report(y_true, preds, target_names=['1','0'])
print(report)

## Cell 9 ##

## Misclassified Images with top loss ##

interp.plot_top_losses(9, figsize=(8,8))

interp.most_confused(min_val=2)